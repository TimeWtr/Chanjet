// Code generated by go generate; DO NOT EDIT.
// Templates: atomic_generated.go.tmpl

package atomicx

import (
	"sync/atomic"
	"unsafe"
)

{{range .Types}}
// {{.Name}} Atomic type encapsulation
type {{.Name}} struct {
	value {{.Base}}
}

// New{{.Name}} Create a new {{.Name}} atomic object
func New{{.Name}}(v {{.Base}}) *{{.Name}} {
	return &{{.Name}}{value: v}
}

// Add Atomic addition
func (a *{{.Name}}) Add(delta {{.Base}}) {{.Base}} {
	return atomic.Add{{.AtomicSuffix}}((*{{.Base}})(unsafe.Pointer(&a.value)), delta)
}

// Store Atomic storage
func (a *{{.Name}}) Store(val {{.Base}}) {
	atomic.Store{{.AtomicSuffix}}((*{{.Base}})(unsafe.Pointer(&a.value)), val)
}

// Load Atomic loading
func (a *{{.Name}}) Load() {{.Base}} {
	return atomic.Load{{.AtomicSuffix}}((*{{.Base}})(unsafe.Pointer(&a.value)))
}

// Swap Atomic swap
func (a *{{.Name}}) Swap(newVal {{.Base}}) {{.Base}} {
	return atomic.Swap{{.AtomicSuffix}}((*{{.Base}})(unsafe.Pointer(&a.value)), newVal)
}

// CompareAndSwap compare and swap
func (a *{{.Name}}) CompareAndSwap(oldVal, newVal {{.Base}}) bool {
	return atomic.CompareAndSwap{{.AtomicSuffix}}((*{{.Base}})(unsafe.Pointer(&a.value)), oldVal, newVal)
}

// Inc Atomic increment
func (a *{{.Name}}) Inc() {{.Base}} {
	return a.Add(1)
}

// Dec Atomic decrement
func (a *{{.Name}}) Dec() {{.Base}} {
    {{if .IsSigned}}
        return a.Add(-1)
    {{else}}
        return a.Add(^{{.Base}}(0))
    {{end}}
}
{{end}}