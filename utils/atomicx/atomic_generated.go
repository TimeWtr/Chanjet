// Code generated by go generate; DO NOT EDIT.
// Templates: atomic_generated.go.tmpl

package atomicx

import (
	"sync/atomic"
	"unsafe"
)

// Int32 Atomic type encapsulation
type Int32 struct {
	value int32
}

// NewInt32 Create a new Int32 atomic object
func NewInt32(v int32) *Int32 {
	return &Int32{value: v}
}

// Add Atomic addition
func (a *Int32) Add(delta int32) int32 {
	return atomic.AddInt32((*int32)(unsafe.Pointer(&a.value)), delta)
}

// Store Atomic storage
func (a *Int32) Store(val int32) {
	atomic.StoreInt32((*int32)(unsafe.Pointer(&a.value)), val)
}

// Load Atomic loading
func (a *Int32) Load() int32 {
	return atomic.LoadInt32((*int32)(unsafe.Pointer(&a.value)))
}

// Swap Atomic swap
func (a *Int32) Swap(newVal int32) int32 {
	return atomic.SwapInt32((*int32)(unsafe.Pointer(&a.value)), newVal)
}

// CompareAndSwap compare and swap
func (a *Int32) CompareAndSwap(oldVal, newVal int32) bool {
	return atomic.CompareAndSwapInt32((*int32)(unsafe.Pointer(&a.value)), oldVal, newVal)
}

// Inc Atomic increment
func (a *Int32) Inc() int32 {
	return a.Add(1)
}

// Dec Atomic decrement
func (a *Int32) Dec() int32 {

	return a.Add(-1)

}

// Int64 Atomic type encapsulation
type Int64 struct {
	value int64
}

// NewInt64 Create a new Int64 atomic object
func NewInt64(v int64) *Int64 {
	return &Int64{value: v}
}

// Add Atomic addition
func (a *Int64) Add(delta int64) int64 {
	return atomic.AddInt64((*int64)(unsafe.Pointer(&a.value)), delta)
}

// Store Atomic storage
func (a *Int64) Store(val int64) {
	atomic.StoreInt64((*int64)(unsafe.Pointer(&a.value)), val)
}

// Load Atomic loading
func (a *Int64) Load() int64 {
	return atomic.LoadInt64((*int64)(unsafe.Pointer(&a.value)))
}

// Swap Atomic swap
func (a *Int64) Swap(newVal int64) int64 {
	return atomic.SwapInt64((*int64)(unsafe.Pointer(&a.value)), newVal)
}

// CompareAndSwap compare and swap
func (a *Int64) CompareAndSwap(oldVal, newVal int64) bool {
	return atomic.CompareAndSwapInt64((*int64)(unsafe.Pointer(&a.value)), oldVal, newVal)
}

// Inc Atomic increment
func (a *Int64) Inc() int64 {
	return a.Add(1)
}

// Dec Atomic decrement
func (a *Int64) Dec() int64 {

	return a.Add(-1)

}

// Uint32 Atomic type encapsulation
type Uint32 struct {
	value uint32
}

// NewUint32 Create a new Uint32 atomic object
func NewUint32(v uint32) *Uint32 {
	return &Uint32{value: v}
}

// Add Atomic addition
func (a *Uint32) Add(delta uint32) uint32 {
	return atomic.AddUint32((*uint32)(unsafe.Pointer(&a.value)), delta)
}

// Store Atomic storage
func (a *Uint32) Store(val uint32) {
	atomic.StoreUint32((*uint32)(unsafe.Pointer(&a.value)), val)
}

// Load Atomic loading
func (a *Uint32) Load() uint32 {
	return atomic.LoadUint32((*uint32)(unsafe.Pointer(&a.value)))
}

// Swap Atomic swap
func (a *Uint32) Swap(newVal uint32) uint32 {
	return atomic.SwapUint32((*uint32)(unsafe.Pointer(&a.value)), newVal)
}

// CompareAndSwap compare and swap
func (a *Uint32) CompareAndSwap(oldVal, newVal uint32) bool {
	return atomic.CompareAndSwapUint32((*uint32)(unsafe.Pointer(&a.value)), oldVal, newVal)
}

// Inc Atomic increment
func (a *Uint32) Inc() uint32 {
	return a.Add(1)
}

// Dec Atomic decrement
func (a *Uint32) Dec() uint32 {

	return a.Add(^uint32(0))

}

// Uint64 Atomic type encapsulation
type Uint64 struct {
	value uint64
}

// NewUint64 Create a new Uint64 atomic object
func NewUint64(v uint64) *Uint64 {
	return &Uint64{value: v}
}

// Add Atomic addition
func (a *Uint64) Add(delta uint64) uint64 {
	return atomic.AddUint64((*uint64)(unsafe.Pointer(&a.value)), delta)
}

// Store Atomic storage
func (a *Uint64) Store(val uint64) {
	atomic.StoreUint64((*uint64)(unsafe.Pointer(&a.value)), val)
}

// Load Atomic loading
func (a *Uint64) Load() uint64 {
	return atomic.LoadUint64((*uint64)(unsafe.Pointer(&a.value)))
}

// Swap Atomic swap
func (a *Uint64) Swap(newVal uint64) uint64 {
	return atomic.SwapUint64((*uint64)(unsafe.Pointer(&a.value)), newVal)
}

// CompareAndSwap compare and swap
func (a *Uint64) CompareAndSwap(oldVal, newVal uint64) bool {
	return atomic.CompareAndSwapUint64((*uint64)(unsafe.Pointer(&a.value)), oldVal, newVal)
}

// Inc Atomic increment
func (a *Uint64) Inc() uint64 {
	return a.Add(1)
}

// Dec Atomic decrement
func (a *Uint64) Dec() uint64 {

	return a.Add(^uint64(0))

}

// Uintptr Atomic type encapsulation
type Uintptr struct {
	value uintptr
}

// NewUintptr Create a new Uintptr atomic object
func NewUintptr(v uintptr) *Uintptr {
	return &Uintptr{value: v}
}

// Add Atomic addition
func (a *Uintptr) Add(delta uintptr) uintptr {
	return atomic.AddUintptr((*uintptr)(unsafe.Pointer(&a.value)), delta)
}

// Store Atomic storage
func (a *Uintptr) Store(val uintptr) {
	atomic.StoreUintptr((*uintptr)(unsafe.Pointer(&a.value)), val)
}

// Load Atomic loading
func (a *Uintptr) Load() uintptr {
	return atomic.LoadUintptr((*uintptr)(unsafe.Pointer(&a.value)))
}

// Swap Atomic swap
func (a *Uintptr) Swap(newVal uintptr) uintptr {
	return atomic.SwapUintptr((*uintptr)(unsafe.Pointer(&a.value)), newVal)
}

// CompareAndSwap compare and swap
func (a *Uintptr) CompareAndSwap(oldVal, newVal uintptr) bool {
	return atomic.CompareAndSwapUintptr((*uintptr)(unsafe.Pointer(&a.value)), oldVal, newVal)
}

// Inc Atomic increment
func (a *Uintptr) Inc() uintptr {
	return a.Add(1)
}

// Dec Atomic decrement
func (a *Uintptr) Dec() uintptr {

	return a.Add(^uintptr(0))

}
